WebSocket remote Virtual Terminal protocol

the api is designed to offer flexible control over the terminal frontend and its behavior to an endpoint "terminal driver"
based on Uint16Array, all messages as 16-bit aligned

message[0] = message type

Host bound 0x00 On front-end Ready
message[1] = initial viewport width (in columns)
message[2] = initial viewport height (in rows)

Host bound 0x01 On viewport resize
message[1] = new viewport width (in columns)
message[2] = new viewport height (in rows)

Host bound 0x02 On input char
message[1] = utf-16 character
message[2] = modifier flags
  from lsb to msb
  bit 0: shift?
  bit 1: alt?
  bit 2: meta? (command key on mac, windows key on windows)
  bit 3: Ctrl?
  bits 4-15 unused

Host bound 0x03 On special key
message[1] = special key code
  backspace = 0x00
  enter = 0x01
  tab = 0x02
  arrowup = 0x03
  arrowdown = 0x04
  arrowleft = 0x05
  arrowright = 0x06
message[1] = modifier flags
  same as above message

Host bound 0x04 On user scroll
message[1] = delta x
message[2] = delta y



Host bound 0x05 Buffer created
message[1]  = request id
message[2]  = buffer id
message[3]  = buffer width
message[4]  = buffer height
message[5]  = cursor x
message[6]  = cursor y
message[7]  = backgroundr << 8 | backgroundg
message[8]  = backgroundb << 8 | backgrounda
message[9]  = foregroundr << 8 | foregroundg
message[10] = foregroundb << 8 | foregrounda

Host bound 0x06 Viewport created
message[1] = request id
message[2] = viewport id
message[3] = x offset
message[4] = y offset
message[5] = cursor state
  solid = 0x00
  blink = 0x01
  invisible = 0x02
message[5] = source buffer id

Host bound 0x07 Buffer attributes changed
message[1] = buffer id
message[2] = updated attribute bitmask
  from lsb to msb
  bit 0: buffer size?
  bit 1: cursor position?
  bit 2: background color?
  bit 3: foreground color?
n = 3
if buffer size?
  message[n++] = buffer width
  message[n++] = buffer height
if cursor position?
  message[n++] = cursor x
  message[n++] = cursor y
if background color?
  message[n++]  = backgroundr << 8 | backgroundg
  message[n++]  = backgroundb << 8 | backgrounda
if foreground color?
  message[n++]  = foregroundr << 8 | foregroundg
  message[n++]  = foregroundb << 8 | foregrounda

Host bound 0x08 Viewport attributes changed
message[1] = viewport id
message[2] = x offset
message[3] = y offset
message[4] = cursor state
  solid = 0x00
  blink = 0x01
  invisible = 0x02

Host bound 0x09 Buffer or viewport request processed
message[1] = request id

Client bound 0x00 Create buffer
message[1] = request id
message[2] = buffer width

Client bound 0x01 Create viewport
message[1] = request id
message[2] = buffer id
message[3] = initial x offset
message[4] = initial y offset

Client bound 0x02 Process viewport command
message[1] = request id
message[2] = viewport id
message[3] = action flags
  from lsb to msb
  bit 0: apply scroll offset?
  bit 1: scroll cursor into view?
  bit 2: present?
if apply scroll offset?
  message[4] = scroll x offset
  message[5] = scroll y offset


Client bound 0x02 Process buffer commands
Writing large amounts of formatted text to the buffer would be the biggest bottleneck mostly just because of the overhead in processing each command separately as another web-socket message and because of extra bandwidth usage from attribute-changed messages sent while a large set of already queued instructions are simultaneously sent from the host. after all commands in the request are processed, attribute-changed messages are generated and then finally host bound 0x09 commands processed is sent
message[1] = buffer id
message[2] = request id
  the rest of the message is a run-length encoded virtual terminal buffer command format detailed below
  there are four attributes of the run-length encoded text:
  1. position
  2. background color
  3. foreground color
  4. text

  run-length control tokens signal which attributes are supplied in each command vs which attributes repeat the value of the last command
  a run-length control token is two 16-bit integers
  token[0] = number of commands which do not specify the controlled attribute and instead use the value of the last command
  token[1] = number of additional commands where the controlled attribute is specified
  the sum of token[0] + token[1] represents when the offset from the current run-length control token to the next of the same attribute

  the order of conditionally supplied run-length tokens and attributes is listed below. on the first process command, all run-length tokens and attribute values must be included
  command[n+=2] = position run-length control token; if indicated by the run-length state
  command[n++]  = cursor position x; if indicated by the run-length state
  command[n++]  = cursor position y; if indicated by the run-length state
  command[n+=2] = background color run-length control token; if indicated by the run-length state
  command[n++]  = backgroundr << 8 | backgroundg; if indicated by the run-length state
  command[n++]  = backgroundb << 8 | backgrounda; if indicated by the run-length state
  command[n+=2] = foreground color run-length control token; if indicated by the run-length state
  command[n++]  = foregroundr << 8 | foregroundg; if indicated by the run-length state
  command[n++]  = foregroundb << 8 | foregrounda; if indicated by the run-length state
  command[n+=2] = text run-length control token; if indicated by the run-length state
  command[n++]  = utf-16 text character; if indicated by the run-length state
